/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2018 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */
package ti.googlefit;

import android.Manifest;
import android.app.Activity;
import android.content.Intent;
import android.content.pm.PackageManager;

import androidx.annotation.NonNull;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import com.google.android.gms.auth.api.signin.GoogleSignIn;
import com.google.android.gms.auth.api.signin.GoogleSignInAccount;
import com.google.android.gms.fitness.Fitness;
import com.google.android.gms.fitness.FitnessOptions;
import com.google.android.gms.fitness.data.Bucket;
import com.google.android.gms.fitness.data.DataPoint;
import com.google.android.gms.fitness.data.DataSet;
import com.google.android.gms.fitness.data.DataType;
import com.google.android.gms.fitness.data.Field;
import com.google.android.gms.fitness.request.DataReadRequest;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.concurrent.TimeUnit;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiLifecycle.OnActivityResultEvent;

@Kroll.module(name = "TiGooglefit", id = "ti.googlefit")
public class TiGooglefitModule extends KrollModule implements OnActivityResultEvent, ActivityCompat.OnRequestPermissionsResultCallback {

    // Standard Debugging variables
    private static final String LCAT = "TiGooglefitModule";
    private static final boolean DBG = TiConfig.LOGD;
    int GOOGLE_FIT_PERMISSIONS_REQUEST_CODE = 1;
    FitnessOptions fitnessOptions;
    int lastYears = -2;
    GoogleSignInAccount googleSignInAccount;
    // You can define constants with @Kroll.constant, for example:
    // @Kroll.constant public static final String EXTERNAL_NAME = value;

    public TiGooglefitModule() {
        super();
    }

    @Kroll.onAppCreate
    public static void onAppCreate(TiApplication app) {
        Log.d(LCAT, "inside onAppCreate");
        // put module init code that needs to run when the application is created
    }

    // Methods
    @Kroll.method
    public void create() {

        Activity act = TiApplication.getAppCurrentActivity();

        googleSignInAccount = GoogleSignIn.getLastSignedInAccount(act);
        fitnessOptions = FitnessOptions.builder()
                .addDataType(DataType.TYPE_STEP_COUNT_DELTA, FitnessOptions.ACCESS_READ)
                .addDataType(DataType.AGGREGATE_STEP_COUNT_DELTA, FitnessOptions.ACCESS_READ)
                .build();

        if (ContextCompat.checkSelfPermission(act, Manifest.permission.ACTIVITY_RECOGNITION) != PackageManager.PERMISSION_GRANTED) {
            // Permission is not granted
            ActivityCompat.requestPermissions(act, new String[]{Manifest.permission.ACTIVITY_RECOGNITION}, GOOGLE_FIT_PERMISSIONS_REQUEST_CODE);
        } else {
            if (!GoogleSignIn.hasPermissions(googleSignInAccount, fitnessOptions)) {
                GoogleSignIn.requestPermissions(act, GOOGLE_FIT_PERMISSIONS_REQUEST_CODE , googleSignInAccount, fitnessOptions);
            }
        }

    }

    @Kroll.method
    public void getData(@Kroll.argument(optional = true) KrollDict data) {
        if (data != null && data.containsKeyAndNotNull("years")) {
            lastYears = data.getInt("years") * -1;
        }
        accessGoogleFit();
    }

    @Kroll.method
    public void disconnect() {
        Fitness.getConfigClient(TiApplication.getAppCurrentActivity(), GoogleSignIn.getAccountForExtension(TiApplication.getAppCurrentActivity(), fitnessOptions))
                .disableFit().addOnSuccessListener(e -> {
                    Log.i("---", "Disconnected");
                }).addOnFailureListener(e -> {
                    Log.i("---", "Disconnected error");
                });

    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        if (requestCode == GOOGLE_FIT_PERMISSIONS_REQUEST_CODE) {
            accessGoogleFit();
        }
    }

    // protected void onActivityResult(int requestCode, int resultCode, Intent data) {
    @Override
    public void onActivityResult(Activity activity, int requestCode, int resultCode, Intent data) {
        Log.i(LCAT, "Result: " + resultCode);
        if (resultCode == Activity.RESULT_OK) {
            if (requestCode == GOOGLE_FIT_PERMISSIONS_REQUEST_CODE) {
                accessGoogleFit();
            }
        } else {
            KrollDict fields = new KrollDict();
            fields.put("error", "Code: " + resultCode);
            fireEvent("error", fields);
        }
    }

    private void accessGoogleFit() {
        Activity act = TiApplication.getAppCurrentActivity();
        Calendar cal = Calendar.getInstance();
        cal.setTime(new Date());
        long endTime = cal.getTimeInMillis();
        cal.add(Calendar.YEAR, lastYears);
        long startTime = cal.getTimeInMillis();
/*
        Fitness.getRecordingClient(act, GoogleSignIn.getAccountForExtension(act, fitnessOptions))
                // This example shows subscribing to a DataType, across all possible data
                // sources. Alternatively, a specific DataSource can be used.
                .subscribe(DataType.TYPE_STEP_COUNT_DELTA)
                .addOnSuccessListener(unused ->
                        Log.i(LCAT, "Successfully subscribed!"))
                .addOnFailureListener(e ->
                        Log.w(LCAT, "There was a problem subscribing.", e));

    */

        DataReadRequest readRequest =
                new DataReadRequest.Builder()
                        .aggregate(DataType.TYPE_STEP_COUNT_DELTA, DataType.AGGREGATE_STEP_COUNT_DELTA)
                        .setTimeRange(startTime, endTime, TimeUnit.MILLISECONDS)
                        .bucketByTime(1, TimeUnit.DAYS)
                        .build();

        googleSignInAccount = GoogleSignIn.getAccountForExtension(act, fitnessOptions);
        Fitness.getHistoryClient(act, googleSignInAccount)
                .readData(readRequest)
                .addOnSuccessListener(response -> {
                    // Use response data here
                    KrollDict data = new KrollDict();
                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm");

                    for (Bucket bucket : response.getBuckets()) {
                        List<DataSet> dataSets = bucket.getDataSets();
                        for (DataSet dataSet : dataSets) {

                            if (dataSet.getDataPoints().size() > 0) {

                                KrollDict dataField = new KrollDict();

                                for (DataPoint dp : dataSet.getDataPoints()) {
                                    dataField.put("type", dp.getDataType().getName());
                                    dataField.put("start", dateFormat.format(dp.getStartTime(TimeUnit.MILLISECONDS)));
                                    dataField.put("end", dateFormat.format(dp.getEndTime(TimeUnit.MILLISECONDS)));

                                    KrollDict fields = new KrollDict();
                                    for (Field field : dp.getDataType().getFields()) {
                                        fields.put("name", field.getName());
                                        fields.put("value", dp.getValue(Field.FIELD_STEPS).asInt());
                                    }
                                    dataField.put("fields", fields);
                                }

                                data.put("data", dataField);
                            }
                        }
                    }

                    fireEvent("data", data);
                })
                .addOnFailureListener(e -> {
                    KrollDict fields = new KrollDict();
                    fields.put("error", e.getMessage());
                    fireEvent("error", fields);
                    Log.d(LCAT, "OnFailure()", e);
                });

    }
}
